{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd521b70-1d01-43fb-b4a8-9b91c926c043",
   "metadata": {},
   "outputs": [],
   "source": [
    "import argparse\n",
    "\n",
    "def parse_bed_file(file_path):\n",
    "    \n",
    "    '''Parse a BED file into a list of intervals'''\n",
    "    \n",
    "    intervals = []\n",
    "    \n",
    "    with open(file_path, 'r') as f:\n",
    "        for line in f:\n",
    "            if line.strip():  # Skip empty lines\n",
    "                fields = line.strip().split('\\t')\n",
    "                if len(fields) < 3:\n",
    "                    raise ValueError(f\"Invalid BED format in line: {line.strip()}\")\n",
    "                chrom = fields[0] # RNAME\n",
    "                start = int(fields[1]) - 1 # POS (convert to 0-based)\n",
    "                end = int(fields[2]) # Calculate end based on read length\n",
    "                intervals.append((chrom, start, end))\n",
    "    return intervals\n",
    "\n",
    "def find_overlaps(bed_a, bed_b):\n",
    "    \n",
    "    '''Find intervals in bed_a that overlap with intervals in bed_b'''\n",
    "    \n",
    "    overlaps = []\n",
    "    \n",
    "    for a_chrom, a_start, a_end in bed_a:\n",
    "        for b_chrom, b_start, b_end in bed_b:\n",
    "            if a_chrom == b_chrom :\n",
    "                # Check if the intervals overlap\n",
    "                if a_start < b_end and a_end > b_start:\n",
    "                    overlaps.append((a_chrom, a_start, a_end))\n",
    "                    break  # Move to the next interval in bed_a after finding an overlap\n",
    "    return overlaps\n",
    "\n",
    "def write_bed_file(output_path, intervals):\n",
    "    \n",
    "    '''Write a list of intervals to a BED file'''\n",
    "    \n",
    "    with open(output_path, 'w') as f:\n",
    "        for chrom, start, end in intervals:\n",
    "            f.write(f\"{chrom}\\t{start}\\t{end}\\n\")\n",
    "            \n",
    "def main():\n",
    "    parser = argparse.ArgumentParser(description = \"Find overlapping intervals between two BED files\")\n",
    "    parser.add_argument(\"--bed_a\", required=True, help = \"Path to the first BED file\")\n",
    "    parser.add_argument(\"--bed_b\", required=True, help = \"Path to the second BED file\")\n",
    "    parser.add_argument(\"output\", help = \"Path to the output BED file\")\n",
    "    args = parser.parse_args()\n",
    "\n",
    "    # Parse both BED files\n",
    "    bed_a = parse_bed_file(args.bed_a)\n",
    "    bed_b = parse_bed_file(args.bed_b)\n",
    "\n",
    "    # Find overlaps\n",
    "    overlaps = find_overlaps(bed_a, bed_b)\n",
    "\n",
    "    # Write overlaps to output file\n",
    "    write_bed_file(args.output, overlaps)\n",
    "    print(f\"Overlaps written to {args.output}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b99b41f7-5df7-4989-bb6d-dd2b26fc2f8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run in Python: python genomic_intervals.py --bed_a brain_dnase1_chr21.bed --bed_b gut_dnase1_chr21.bed output_overlaps.bed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8b65b36-6f4f-42da-84ef-329b267101e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Optional Exercise 4:\n",
    "\n",
    "import argparse\n",
    "\n",
    "import sys\n",
    "\n",
    "def parse_bed_file(file_path):\n",
    "    \n",
    "    '''Parse a BED file into a list of intervals'''\n",
    "    \n",
    "    intervals = []\n",
    "    \n",
    "    with open(file_path, 'r') as f:\n",
    "        for line in f:\n",
    "            if line.strip():  # Skip empty lines\n",
    "                fields = line.strip().split('\\t')\n",
    "                if len(fields) < 3:\n",
    "                    raise ValueError(f\"Invalid BED format in line: {line.strip()}\")\n",
    "                chrom = fields[0]  # RNAME\n",
    "                start = int(fields[1]) - 1  # POS (convert to 0-based)\n",
    "                end = int(fields[2])  # Calculate end based on read length\n",
    "                intervals.append((chrom, start, end))\n",
    "    return intervals\n",
    "\n",
    "def find_overlaps(bed_a, bed_b):\n",
    "    \n",
    "    '''Find intervals in bed_a that overlap with intervals in bed_b'''\n",
    "    \n",
    "    overlaps = []\n",
    "    \n",
    "    for a_chrom, a_start, a_end in bed_a:\n",
    "        for b_chrom, b_start, b_end in bed_b:\n",
    "            if a_chrom == b_chrom :\n",
    "                # Check if the intervals overlap\n",
    "                if a_start < b_end and a_end > b_start:\n",
    "                    overlaps.append((a_chrom, a_start, a_end))\n",
    "                    break  # Move to the next interval in bed_a after finding an overlap\n",
    "    return overlaps\n",
    "\n",
    "def write_bed_file(output_path, intervals):\n",
    "    \n",
    "    '''Write a list of intervals to a BED file or stdout'''\n",
    "    \n",
    "    if output_path == \"-\":  # Write to stdout\n",
    "        output_stream = sys.stdout\n",
    "    else:\n",
    "        output_stream = open(output_path, 'w')\n",
    "\n",
    "    with output_stream:\n",
    "        for chrom, start, end in intervals:\n",
    "            output_stream.write(f\"{chrom}\\t{start}\\t{end}\\n\")\n",
    "\n",
    "def main():\n",
    "    parser = argparse.ArgumentParser(description = \"Find overlapping intervals between two BED files\")\n",
    "    parser.add_argument(\"--bed_a\", required=True, help = \"Path to the first BED file\")\n",
    "    parser.add_argument(\"--bed_b\", required=True, help = \"Path to the second BED file\")\n",
    "    parser.add_argument(\"output\", help = \"Path to the output BED file or '-' for stdout\")\n",
    "    args = parser.parse_args()\n",
    "\n",
    "    # Parse both BED files\n",
    "    bed_a = parse_bed_file(args.bed_a)\n",
    "    bed_b = parse_bed_file(args.bed_b)\n",
    "\n",
    "    # Find overlaps\n",
    "    overlaps = find_overlaps(bed_a, bed_b)\n",
    "\n",
    "    # Write overlaps to output\n",
    "    write_bed_file(args.output, overlaps)\n",
    "    if args.output != \"-\":\n",
    "        print(f\"Overlaps written to {args.output}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
