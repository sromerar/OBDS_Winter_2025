#!/usr/bin/env python
# coding: utf-8

# In[1]:


# Upload the sequence
dna_sequence = 'CGGGGCTAGGGGCGGGGCTCCGTGGACCAGGGTCCAGCCCCAAGCGGGGCGCGATCCTGCCCGGTCGCGCCGACCCCCGGGGTCCTCATATTGTCTGTGGCTTAAGAGGGGAGTCGTCACAGGCGTCAAGTCTTCTTTCTAAAGCCGGGGACCTGGGGAGGAGGTGGGAGTTTACGGGAGGAAGGGCCACGGAGATGGGTCGCTTCTCCTGGAGCTAGAGCTGCGGGCTGGGGTCTCCAGGGTTCGGCCCGGGGAGCCGACCCTGGTCGGCCGTCGGGGCTCTGCTCGGCCCTCCTGAAACCTCCGCCTCCTCCAGCAGGGGGCGGGCCGGGGCCGCGTCTCGGGGGGAAGGCGATCAGGTCGCCCCCTCCTCCGATTCCCCCGCCTTCCAGGACAGCCTCCAGCCCAGAGGGGCGGTCCGGGGGCGGGGTCGCACCGCCCCCTCTCGCTCCCAATCCCGGGGCGGCCGGGCGGGGGTGGGCAGGGGGCGTGAGGCCGCCCCTGCGTCCCGGGGGCCCCCCGAAAACGCGCTCCGGGTGCCCGGTCCCTCCGCTGCGCCCTGCCGCCGTCCTCCCGGGGGTCTCGGGCGGCCGCGGCCGTGTCCTTCGCGTCCCGGCGGCGCGGCGGGAGGGGCCGGCGTGACGCAGCGGTTGCTACGGGCCGCCCTTATAAATAACCGGGCTCAGGAGAAACTTTAGCGAGTCAGAGCCGCGCACGGGACTGGGAAGGGGACCCACCCGAGGGTCCAGCCACCAGCCCCCTCACTAATAGCGGCCACCCCGGCAGCGGCGGCAGCAGCAGCAGCGACGCAGCGGCGACAGCTCAGAGCAGGGAGGCCGCGCCACCTGCGGGCCGGCCGGAGCGGGCAGCCCCAGGCCCCCTCCCCGGGCACCCGCGTTCATGCAACGCCTGGTGGCCTGGGACCCAGCATGTCTCCCCCTGCCGCCGCCGCCGCCTGCCTTTAAATCCATGGAAGTGGCCAACTTCTACTACGAGGCGGACTGCTTGGCTGCTGCGTACGGCGGCAAGGCGGCCCCCGCGGCGCCCCCCGCGGCCAGACCCGGGCCGCGCCCCCCCGCCGGCGAGCTGGGCAGCATCGGCGACCACGAGCGCGCCATCGACTTCAGCCCGTACCTGGAGCCGCTGGGCGCGCCGCAGGCCCCGGCGCCCGCCACGGCCACGGACACCTTCGAGGCGGCTCCGCCCGCGCCCGCCCCCGCGCCCGCCTCCTCCGGGCAGCACCACGACTTCCTCTCCGACCTCTTCTCCGACGACTACGGGGGCAAGAACTGCAAGAAGCCGGCCGAGTACGGCTACGTGAGCCTGGGGCGCCTGGGGGCCGCCAAGGGCGCGCTGCACCCCGGCTGCTTCGCGCCCCTGCACCCACCGCCCCCGCCGCCGCCGCCGCCCGCCGAGCTCAAGGCGGAGCCGGGCTTCGAGCCCGCGGACTGCAAGCGGAAGGAGGAGGCCGGGGCGCCGGGCGGCGGCGCAGGCATGGCGGCGGGCTTCCCGTACGCGCTGCGCGCTTACCTCGGCTACCAGGCGGTGCCGAGCGGCAGCAGCGGGAGCCTCTCCACGTCCTCCTCGTCCAGCCCGCCCGGCACGCCGAGCCCCGCTGACGCCAAGGCGCCCCCGACCGCCTGCTACGCGGGGGCCGCGCCGGCGCCCTCGCAGGTCAAGAGCAAGGCCAAGAAGACCGTGGACAAGCACAGCGACGAGTACAAGATCCGGCGCGAGCGCAACAACATCGCCGTGCGCAAGAGCCGCGACAAGGCCAAGATGCGCAACCTGGAGACGCAGCACAAGGTCCTGGAGCTCACGGCCGAGAACGAGCGGCTGCAGAAGAAGGTGGAGCAGCTGTCGCGCGAGCTCAGCACCCTGCGGAACTTGTTCAAGCAGCTGCCCGAGCCCCTGCTCGCCTCCTCCGGCCACTGCTAGCGCGGCCCCCGCGCGCGTCCCCCTGCCGGCCGGGGCTGAGACTCCGGGGAGCGCCCGCGCCCGCGCCCTCGCCCCCGCCCCCGGCGGCGCCGGCAAAACTTTGGCACTGGGGCACTTGGCAGCGCGGGGAGCCCGTCGGTAATTTTAATATTTTATTATATATATATATCTATATTTTTGTCCAAACCAACCGCACATGCAGATGGGGCTCCCGCCCGTGGTGTTATTTAAAGAAGAAACGTCTATGTGTACAGATGAATGATAAACTCTCTGCTTCTCCCTCTGCCCCTCTCCAGGCGCCGGCGGGCGGGCCGGTTTCGAAGTTGATGCAATCGGTTTAAACATGGCTGAACGCGTGTGTACACGGGACTGACGCAACCCACGTGTAACTGTCAGCCGGGCCCTGAGTAATCGCTTAAAGATGTTCCTACGGGCTTGTTGCTGTTGATGTTTTGTTTTGTTTTGTTTTTTGGTCTTTTTTTGTATTATAAAAAATAATCTATTTCTATGAGAAAAGAGGCGTCTGTATATTTTGGGAATCTTTTCCGTTTCAAGCATTAAGAACACTTTTAATAAACTTTTTTTTGAGAATGGTTACAAAGCCTTTTGGGGGCAGTAATTGGCTTTTGTTTTTTATTTTTTTACTTTATTTTGGATTTGTAGGATTTTGTTTTTGCGTTTCTGGTGTGTAGGGGGTTGTGTGTGGGGGGCTGCTGTTATTTTTGGAGGTTTTGGTGGTTGGGTGGGGGTGTTGCAGCTGGTTTTTCTGCCTCCTCTGCTACTCCCCCTCCCACACACACAGGGTCTGCTTGAGATGGGGTTCCAGCCCCGGGGGAAAGGGGAGAAGAGTAATGGGTCAGGCATTCAGGCTGACTCAGAGCCCCTAGGCGCCGGGACGGGTGGCTGGGAACCCTGCTTGAGAAGAGATTCCGGAGCCTCTGGCTGGTCCCGAGTGTCAGGCTTGGGTTTGGAAGGGCTGGGAGGTCTGTGACCCCTGCCCTGTGTTTGGGGACTAGGTAGGCAGGCCTGTGACTGTAGGAGGAGGGGGTTCAGGTCTTGGTCCTGCTGAGCCCGAGTCAGGGCAGATGCTTTTGGTCAGTGTAGTGGGGTGGGTTGTTTAAAACACAGTTTGTGTATACATGTGTATTTTAAAGAGGGGAGCCTGGGTGTGTGGGCGAGTCTGTGTTTGTGTGTCCCTGGCCAGCAGGAGGGGAGAGGC'


# In[2]:


# Another way to upload the sequence
DNA_sequence = '''
CGGGGCTAGGGGCGGGGCTCCGTGGACCAGGGTCCAGCCCCAAGCGGGGCGCGATCCTGC
CCGGTCGCGCCGACCCCCGGGGTCCTCATATTGTCTGTGGCTTAAGAGGGGAGTCGTCAC
AGGCGTCAAGTCTTCTTTCTAAAGCCGGGGACCTGGGGAGGAGGTGGGAGTTTACGGGAG
GAAGGGCCACGGAGATGGGTCGCTTCTCCTGGAGCTAGAGCTGCGGGCTGGGGTCTCCAG
GGTTCGGCCCGGGGAGCCGACCCTGGTCGGCCGTCGGGGCTCTGCTCGGCCCTCCTGAAA
CCTCCGCCTCCTCCAGCAGGGGGCGGGCCGGGGCCGCGTCTCGGGGGGAAGGCGATCAGG
TCGCCCCCTCCTCCGATTCCCCCGCCTTCCAGGACAGCCTCCAGCCCAGAGGGGCGGTCC
GGGGGCGGGGTCGCACCGCCCCCTCTCGCTCCCAATCCCGGGGCGGCCGGGCGGGGGTGG
GCAGGGGGCGTGAGGCCGCCCCTGCGTCCCGGGGGCCCCCCGAAAACGCGCTCCGGGTGC
CCGGTCCCTCCGCTGCGCCCTGCCGCCGTCCTCCCGGGGGTCTCGGGCGGCCGCGGCCGT
GTCCTTCGCGTCCCGGCGGCGCGGCGGGAGGGGCCGGCGTGACGCAGCGGTTGCTACGGG
CCGCCCTTATAAATAACCGGGCTCAGGAGAAACTTTAGCGAGTCAGAGCCGCGCACGGGA
CTGGGAAGGGGACCCACCCGAGGGTCCAGCCACCAGCCCCCTCACTAATAGCGGCCACCC
CGGCAGCGGCGGCAGCAGCAGCAGCGACGCAGCGGCGACAGCTCAGAGCAGGGAGGCCGC
GCCACCTGCGGGCCGGCCGGAGCGGGCAGCCCCAGGCCCCCTCCCCGGGCACCCGCGTTC
ATGCAACGCCTGGTGGCCTGGGACCCAGCATGTCTCCCCCTGCCGCCGCCGCCGCCTGCC
TTTAAATCCATGGAAGTGGCCAACTTCTACTACGAGGCGGACTGCTTGGCTGCTGCGTAC
GGCGGCAAGGCGGCCCCCGCGGCGCCCCCCGCGGCCAGACCCGGGCCGCGCCCCCCCGCC
GGCGAGCTGGGCAGCATCGGCGACCACGAGCGCGCCATCGACTTCAGCCCGTACCTGGAG
CCGCTGGGCGCGCCGCAGGCCCCGGCGCCCGCCACGGCCACGGACACCTTCGAGGCGGCT
CCGCCCGCGCCCGCCCCCGCGCCCGCCTCCTCCGGGCAGCACCACGACTTCCTCTCCGAC
CTCTTCTCCGACGACTACGGGGGCAAGAACTGCAAGAAGCCGGCCGAGTACGGCTACGTG
AGCCTGGGGCGCCTGGGGGCCGCCAAGGGCGCGCTGCACCCCGGCTGCTTCGCGCCCCTG
CACCCACCGCCCCCGCCGCCGCCGCCGCCCGCCGAGCTCAAGGCGGAGCCGGGCTTCGAG
CCCGCGGACTGCAAGCGGAAGGAGGAGGCCGGGGCGCCGGGCGGCGGCGCAGGCATGGCG
GCGGGCTTCCCGTACGCGCTGCGCGCTTACCTCGGCTACCAGGCGGTGCCGAGCGGCAGC
AGCGGGAGCCTCTCCACGTCCTCCTCGTCCAGCCCGCCCGGCACGCCGAGCCCCGCTGAC
GCCAAGGCGCCCCCGACCGCCTGCTACGCGGGGGCCGCGCCGGCGCCCTCGCAGGTCAAG
AGCAAGGCCAAGAAGACCGTGGACAAGCACAGCGACGAGTACAAGATCCGGCGCGAGCGC
AACAACATCGCCGTGCGCAAGAGCCGCGACAAGGCCAAGATGCGCAACCTGGAGACGCAG
CACAAGGTCCTGGAGCTCACGGCCGAGAACGAGCGGCTGCAGAAGAAGGTGGAGCAGCTG
TCGCGCGAGCTCAGCACCCTGCGGAACTTGTTCAAGCAGCTGCCCGAGCCCCTGCTCGCC
TCCTCCGGCCACTGCTAGCGCGGCCCCCGCGCGCGTCCCCCTGCCGGCCGGGGCTGAGAC
TCCGGGGAGCGCCCGCGCCCGCGCCCTCGCCCCCGCCCCCGGCGGCGCCGGCAAAACTTT
GGCACTGGGGCACTTGGCAGCGCGGGGAGCCCGTCGGTAATTTTAATATTTTATTATATA
TATATATCTATATTTTTGTCCAAACCAACCGCACATGCAGATGGGGCTCCCGCCCGTGGT
GTTATTTAAAGAAGAAACGTCTATGTGTACAGATGAATGATAAACTCTCTGCTTCTCCCT
CTGCCCCTCTCCAGGCGCCGGCGGGCGGGCCGGTTTCGAAGTTGATGCAATCGGTTTAAA
CATGGCTGAACGCGTGTGTACACGGGACTGACGCAACCCACGTGTAACTGTCAGCCGGGC
CCTGAGTAATCGCTTAAAGATGTTCCTACGGGCTTGTTGCTGTTGATGTTTTGTTTTGTT
TTGTTTTTTGGTCTTTTTTTGTATTATAAAAAATAATCTATTTCTATGAGAAAAGAGGCG
TCTGTATATTTTGGGAATCTTTTCCGTTTCAAGCATTAAGAACACTTTTAATAAACTTTT
TTTTGAGAATGGTTACAAAGCCTTTTGGGGGCAGTAATTGGCTTTTGTTTTTTATTTTTT
TACTTTATTTTGGATTTGTAGGATTTTGTTTTTGCGTTTCTGGTGTGTAGGGGGTTGTGT
GTGGGGGGCTGCTGTTATTTTTGGAGGTTTTGGTGGTTGGGTGGGGGTGTTGCAGCTGGT
TTTTCTGCCTCCTCTGCTACTCCCCCTCCCACACACACAGGGTCTGCTTGAGATGGGGTT
CCAGCCCCGGGGGAAAGGGGAGAAGAGTAATGGGTCAGGCATTCAGGCTGACTCAGAGCC
CCTAGGCGCCGGGACGGGTGGCTGGGAACCCTGCTTGAGAAGAGATTCCGGAGCCTCTGG
CTGGTCCCGAGTGTCAGGCTTGGGTTTGGAAGGGCTGGGAGGTCTGTGACCCCTGCCCTG
TGTTTGGGGACTAGGTAGGCAGGCCTGTGACTGTAGGAGGAGGGGGTTCAGGTCTTGGTC
CTGCTGAGCCCGAGTCAGGGCAGATGCTTTTGGTCAGTGTAGTGGGGTGGGTTGTTTAAA
ACACAGTTTGTGTATACATGTGTATTTTAAAGAGGGGAGCCTGGGTGTGTGGGCGAGTCT
GTGTTTGTGTGTCCCTGGCCAGCAGGAGGGGAGAGGC
'''


# In[3]:


# Exercise 1: Write an algorithm that computes the GC content of a DNA sequence

def compute_GC_content(sequence):
    
    # Count the number of Gs and Cs
    G_count = sequence.count('G')
    C_count = sequence.count('C')

    # Calculate GC count
    GC_count = G_count + C_count

    # Calculate GC content as a %
    total_bases = len(sequence)
    GC_content = (GC_count/total_bases) * 100 
    
    return GC_content


# In[4]:


# Exercise 1 validation

sequence = dna_sequence
gc_content = compute_GC_content(sequence)
print(f"GC Content: {gc_content:.2f}%")


# In[5]:


# Exercise 2: Write an algorithm that finds all occurrences of "TATA" motif in a 
# sequence and returns their positions

def find_TATA_motifs(seuqence):
    
    motif = "TATA"
    positions = []
    
    for i in range(len(sequence) - len(motif) + 1):
        if sequence[i:i+len(motif)] == motif:
            positions.append(i)
    
    return positions


# In[6]:


# Exercise 2 validation

sequence = DNA_sequence
result = find_TATA_motifs(sequence)
print(result)


# In[7]:


# Exercise 3: Write an algorithm that calculates the hamming distance 
# (number of base differences) between two DNA sequences

def hamming_distance(seq1,seq2):
    
    # Initialize the Hamming distance
    distance = 0
    
    # Loop through each base in the sequences
    for base1, base2 in zip(seq1, seq2):
        if base1 != base2:
            distance += 1
            
    return distance


# In[8]:


# Exercise 3 validation

# Define variables
seq1 = 'AAACGTAGGACAAAACGA'
seq2 = 'CCCTGACAAAGGAAATGA'

# Run algorithm
print(f"Hamming Distance: {hamming_distance(seq1, seq2)}")


# In[9]:


# Exercise 4: Write an algorithm that finds the consensus sequence between a set 
# of sequences with the same length

from collections import Counter

def find_consensus_sequence(sequences):

    consensus_sequence = []
    
    # Iterate over each position in the sequences
    for i in range(len(sequences[0])):
        # Extract the bases at this position from all sequences
        bases_at_position = [seq[i] for seq in sequences]
        
        # Count the frequency of each base
        base_counts = Counter(bases_at_position)
        
        # Find the base with the highest frequency
        most_common_base = base_counts.most_common(1)[0][0]
        
        # Append the most common base to the consensus sequence
        consensus_sequence.append(most_common_base)
    
    # Join the list into a string and return it
    return ''.join(consensus_sequence)


# In[10]:


# Exercise 4 validation

motif_list = ['ATCCAGCT', 'GGGCAACT', 'ATGGATCT', 'AAGCAACC', 'TTGGAACT', 'ATGCCATT', 'ATGGCACT']
consensus = find_consensus_sequence(motif_list)
print(f"Consensus Sequence: {consensus}")


# In[11]:


# Exercise 4: Write an algorithm that finds the consensus sequence between a set 
# of sequences with the same length (alternative version)

from collections import Counter

def create_motif_profile(sequences):
    
    # Initialize the motif profile table with nested structures (dict of counts for each base at each position)
    motif_profile = []
    
    # Iterate over each column in the sequences (each position across all sequences)
    for i in range(len(sequences[0])):
        base_counts = Counter(sequence[i] for sequence in sequences)
        motif_profile.append(base_counts)
    
    return motif_profile

def find_consensus_sequence(motif_profile):
    
    consensus_sequence = ""
    
    # For each column in the motif profile, select the base with the highest count
    for base_counts in motif_profile:
        # Select the base with the highest count
        consensus_base = base_counts.most_common(1)[0][0]  # Get the most common base
        consensus_sequence += consensus_base
    
    return consensus_sequence
        
def print_motif_profile(sequences, motif_profile):
    print("Motif Profile Table:")
    print("Base | " + " | ".join(f"Seq {i+1}" for i in range(len(sequences))))
    print("-" * (7 + 6 * len(sequences)))
    
    bases = ['A', 'C', 'G', 'T']
    for base in bases:
        row = [base]  # Start the row with the base
        for i in range(len(sequences[0])):  # For each position in the sequences
            # Append the count of the base at the current position
            row.append(motif_profile[i].get(base, 0))
        print(" | ".join(map(str, row)))


# In[12]:


# Exercise 4 validation (alternative version)

motif_list = ['ATCCAGCT', 'GGGCAACT', 'ATGGATCT', 'AAGCAACC', 'TTGGAACT', 'ATGCCATT', 'ATGGCACT']
motif_profile = create_motif_profile(motif_list)
consensus_sequence = find_consensus_sequence(motif_profile)

# Print the motif profile and consensus sequence
print_motif_profile(motif_list, motif_profile)
print("\nConsensus Sequence:", consensus_sequence)

